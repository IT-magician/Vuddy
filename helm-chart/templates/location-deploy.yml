apiVersion: apps/v1
kind: Deployment
metadata:
  name: location
  namespace: {{ .Release.Namespace }}
  labels:
    app: location
spec:
  selector:
    matchLabels:
      app: location
  replicas: {{ .Values.backend.location.replicaCount }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: location
    spec:
      # initContainers:
      # Init containers are exactly like regular containers, except:
      # - Init containers always run to completion.
      # - Each init container must complete successfully before the next one starts.
      containers:
        - name: location
          {{ if (empty .Values.backend.location.image.tag) }}
          image: itmagician/b305-vuddy-location
          {{ else }}
          image: {{ printf "itmagician/b305-vuddy-location:%s" .Values.backend.location.image.tag }}
          {{ end }}
          # image: itmagician/b305-vuddy-location:f2150ec191d9cc415dc94dbae9a84abf95b53956

          # resources:
          #   requests:
          #     cpu: 100m
          #     memory: 100Mi
          #   limits:
          #     cpu: 100m
          #     memory: 100Mi
          readinessProbe:
            tcpSocket:
              port: 8080
            # httpGet:
            #   path: /location/opened/health
            #   port: 8080
            initialDelaySeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /location/opened/health
              port: 8080
            initialDelaySeconds: 120
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 10
            periodSeconds: 30

          env:
            - name: MYSQL_URL
              value: {{ .Values.mysql.url }}
            - name: MYSQL_USERNAME
              value: {{ .Values.mysql.username }}
            - name: MYSQL_PASSWORD
              value: {{ .Values.mysql.password }}
            - name: REDIS_HOST_NAME
              value: {{ .Values.redis.url }}
            - name: REDIS_PASSWORD
              value: {{ .Values.redis.password }}
            - name: REDIS_PORT
              value: {{ .Values.redis.port }}
            - name: KAFKA_HOST_NAME
              value: {{ printf "%s" .Values.kafka.hostname }}
          ports:
            - containerPort: 8080
      restartPolicy: {{ .Values.backend.location.image.pullPolicy }}
---
apiVersion: v1
kind: Service
metadata:
  name: location-svc
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: location
  type: ClusterIP
  # sessionAffinity: None
  # sessionAffinityConfig:
  #   clientIP:
  #     timeoutSeconds: 10800
  ports:
    - name: location-svc
      protocol: TCP
      port: 80
      targetPort: 8080
