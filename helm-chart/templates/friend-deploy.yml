apiVersion: apps/v1
kind: Deployment
metadata:
  name: friend
  namespace: {{ .Release.Namespace }}
  labels:
    app: friend
spec:
  selector:
    matchLabels:
      app: friend
  replicas: {{ .Values.backend.friend.replicaCount }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: friend
    spec:
      # initContainers:
      # Init containers are exactly like regular containers, except:
      # - Init containers always run to completion.
      # - Each init container must complete successfully before the next one starts.
      containers:
        - name: friend
          {{ if (empty .Values.backend.friend.image.tag) }}
          image: itmagician/b305-vuddy-friend
          {{ else }}
          image: {{ printf "itmagician/b305-vuddy-friend:%s" .Values.backend.friend.image.tag }}
          {{ end }}
          # resources:
          #   requests:
          #     cpu: 100m
          #     memory: 100Mi
          #   limits:
          #     cpu: 100m
          #     memory: 100Mi
          livenessProbe:
            httpGet:
              path: /friend/opened/health
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10
          env:
            - name: MYSQL_URL
              value: {{ .Values.mysql.url }}
            - name: MYSQL_USERNAME
              value: {{ .Values.mysql.username }}
            - name: MYSQL_PASSWORD
              value: {{ .Values.mysql.password }}
          ports:
            - containerPort: 8080
      restartPolicy: {{ .Values.backend.friend.image.pullPolicy }}
---
apiVersion: v1
kind: Service
metadata:
  name: friend-svc
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: friend
  type: ClusterIP # LoadBalancer
  # sessionAffinity: None
  # sessionAffinityConfig:
  #   clientIP:
  #     timeoutSeconds: 10800
  ports:
    - name: friend-svc
      protocol: TCP
      port: 80
      targetPort: 8080
