apiVersion: apps/v1
kind: Deployment
metadata:
  name: test
  namespace: {{ .Release.Namespace }}
  labels:
    app: test
spec:
  selector:
    matchLabels:
      app: test
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: test
    spec:
      # initContainers:
      # Init containers are exactly like regular containers, except:
      # - Init containers always run to completion.
      # - Each init container must complete successfully before the next one starts.
      containers:
        - name: test
          {{ if (empty .Values.backend.test.image.tag) }}
          image: itmagician/b305-vuddy-test
          {{ else }}
          image: {{ printf "itmagician/b305-vuddy-test:%s" .Values.backend.test.image.tag }}
          {{ end }}
          # resources:
          #   requests:
          #     cpu: 100m
          #     memory: 100Mi
          #   limits:
          #     cpu: 100m
          #     memory: 100Mi
          # livenessProbe:
          #   tcpSocket:
          #     port: 80
          #   initialDelaySeconds: 5
          #   timeoutSeconds: 5
          #   successThreshold: 1
          #   failureThreshold: 3
          #   periodSeconds: 10
          # readinessProbe:
          #   httpGet:
          #     path: /_status/healthz
          #     port: 80
          #   initialDelaySeconds: 5
          #   timeoutSeconds: 2
          #   successThreshold: 1
          #   failureThreshold: 3
          #   periodSeconds: 10



          readinessProbe:
            httpGet:
              path: /test/hello
              port: 8080
            initialDelaySeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /test/hello
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10

          env:
            - name: MYSQL_URL
              value: {{ .Values.mysql.url }}
            - name: MYSQL_USERNAME
              value: {{ .Values.mysql.username }}
            - name: MYSQL_PASSWORD
              value: {{ .Values.mysql.password }}
          ports:
            - containerPort: 8080
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: test-svc
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: test
  type: "ClusterIP"
  # sessionAffinity: None
  # sessionAffinityConfig:
  #   clientIP:
  #     timeoutSeconds: 10800
  ports:
    - name: test-svc
      protocol: TCP
      port: {{ .Values.ingress.port }}
      targetPort: 8080
      # If you set the `spec.type` field to `NodePort` and you want a specific port number,
      # you can specify a value in the `spec.ports[*].nodePort` field.
