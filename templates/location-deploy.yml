apiVersion: apps/v1
kind: Deployment
metadata:
  name: location
  namespace: {{ .Release.Namespace }}
  labels:
    app: location
spec:
  selector:
    matchLabels:
      app: location
  replicas: {{ .Values.replicaCount }}
  # strategy:
  #   rollingUpdate:
  #     maxSurge: 25%
  #     maxUnavailable: 25%
  #   type: RollingUpdate
  template:
    metadata:
      labels:
        app: location
    spec:
      # initContainers:
      # Init containers are exactly like regular containers, except:
      # - Init containers always run to completion.
      # - Each init container must complete successfully before the next one starts.
      containers:
        - name: location
          image: itmagician/b305-vuddy:location
          # resources:
          #   requests:
          #     cpu: 100m
          #     memory: 100Mi
          #   limits:
          #     cpu: 100m
          #     memory: 100Mi
          # livenessProbe:
          #   tcpSocket:
          #     port: 80
          #   initialDelaySeconds: 5
          #   timeoutSeconds: 5
          #   successThreshold: 1
          #   failureThreshold: 3
          #   periodSeconds: 10
          # readinessProbe:
          #   httpGet:
          #     path: /_status/healthz
          #     port: 80
          #   initialDelaySeconds: 5
          #   timeoutSeconds: 2
          #   successThreshold: 1
          #   failureThreshold: 3
          #   periodSeconds: 10
          env:
            - name: MYSQL_URL
              value: {{ .Values.mysql.url }}
            - name: MYSQL_USERNAME
              value: {{ .Values.mysql.username }}
            - name: MYSQL_PASSWORD
              value: {{ .Values.mysql.password }}
            - name: REDIS_HOST_NAME
              value: {{ .Values.redis.url }}
            - name: REDIS_PASSWORD
              value: {{ .Values.redis.password }}
            - name: KAFKA_HOST_NAME
              value: {{ printf "%s" .Values.kafka.hostname }}
          ports:
            - containerPort: 8080
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: location-svc
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: location
  type: ClusterIP
  # sessionAffinity: None
  # sessionAffinityConfig:
  #   clientIP:
  #     timeoutSeconds: 10800
  ports:
    - name: location-svc
      protocol: TCP
      port: 80
      targetPort: 8080
