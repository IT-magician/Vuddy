image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
variables:
  TF_ROOT: ${CI_PROJECT_DIR}/terraform
  TF_STATE_NAME: "${CI_PROJECT_NAME}-${CI_COMMIT_BRANCH}" # EC2, EKS, VPC, IAM, route53을 접근하는 infra그룹용
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}"
  # https://registry.terraform.io/providers/hashicorp/aws/latest/docs#environment-variables
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  PROJECT_ID: ${CI_PROJECT_ID}
  TF_USERNAME: ${TF_USERNAME}
  TF_PASSWORD: ${TF_PASSWORD}
  TF_INIT_FLAGS: ""


cache:
  key: example-production
  paths:
    - ${TF_ROOT}/.terraform

before_script:
  - cd ${TF_ROOT}
  - |
    cat > backend.tf << EOF
    terraform {
      backend "http" {
      }
    }
    EOF

stages:
  - prepare
  - validate
  - build
  - deploy
  - cleanup

init:
  stage: prepare
  tags:
    - docker-executor
  script:
    - |
      gitlab-terraform init \
      -backend-config=address=${TF_ADDRESS} \
      -backend-config=lock_address=${TF_ADDRESS}/lock \
      -backend-config=unlock_address=${TF_ADDRESS}/lock \
      -backend-config=username=${TF_USERNAME} \
      -backend-config=password=${TF_PASSWORD} \
      -backend-config=lock_method=POST \
      -backend-config=unlock_method=DELETE \
      -backend-config=retry_wait_min=5 $TF_INIT_FLAGS
      echo "${TF_STATE_NAME} ${CI_COMMIT_BRANCH}"
      
validate:
  stage: validate
  tags:
    - docker-executor
  script:
    - gitlab-terraform init
    - gitlab-terraform validate
  dependencies:              
    - validate

plan:
  stage: build
  tags:
    - docker-executor
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json



# Separate apply job for manual launching Terraform as it can be destructive
# action.
apply:
  stage: deploy
  tags:
    - docker-executor
  environment:
    name: production
  script:
    - gitlab-terraform apply
  dependencies:
    - plan
  resource_group: ${TF_STATE_NAME}
  when: manual
  only:
    - devops/terraform/eks

    

destroy:
  stage: cleanup
  tags:
    - docker-executor
  script:
    - gitlab-terraform destroy
  resource_group: ${TF_STATE_NAME}
  when: manual










# build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "$CI_PROJECT_ID $CI_PIPELINE_ID"
#     - echo "Compile complete."